{"version":3,"sources":["Card/Card.jsx","DrawButton/DrawButton.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","handleCardFlip","setState","flipped","state","bind","className","onClick","this","src","imageSrc","eng","kanji","romanji","Component","DrawButton","drawCard","App","getimageSrc","newURL","currentCard","axios","get","then","response","data","results","urls","small","cards","updateCard","prevProps","prevState","currentCards","Math","floor","random","length","getRandomCard","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"wVAuCeA,G,8DAnCb,WAAYC,GAAQ,IAAD,8BACnB,cAAMA,IAQNC,eAAiB,WACf,EAAKC,SAAS,CACZC,SAAU,EAAKC,MAAMD,WATzB,EAAKC,MAAQ,CACXD,SAAS,GAGX,EAAKF,eAAiB,EAAKA,eAAeI,KAApB,gBANH,E,qDAeT,IAAD,OACP,OACE,yBAAKC,UAAU,kBACX,yBAAKC,QAAS,kBAAM,EAAKN,kBAAkBK,UAAWE,KAAKJ,MAAMD,QAAU,OAAS,mBAClF,yBAAKG,UAAU,gCACX,yBAAKA,UAAU,mBACb,yBAAKG,IAAKD,KAAKR,MAAMU,YAEvB,yBAAKJ,UAAU,WAAWE,KAAKR,MAAMW,MAEzC,yBAAKL,UAAU,+BACX,yBAAKA,UAAU,SAASE,KAAKR,MAAMY,OACnC,yBAAKN,UAAU,WAAWE,KAAKR,MAAMa,gB,GA5BlCC,cCoBJC,G,wDAnBX,WAAYf,GAAO,IAAD,8BACd,cAAMA,IAEDgB,SAAW,EAAKA,SAASX,KAAd,gBAHF,E,uDAOdG,KAAKR,MAAMgB,a,+BAIX,OACI,yBAAKV,UAAU,oBACX,4BAAQA,UAAU,MAAMC,QAASC,KAAKQ,UAAtC,kB,GAdSF,cCyEVG,E,kDAjEb,WAAYjB,GAAQ,IAAD,8BACjB,cAAMA,IAoBRkB,YAAc,WACZ,IACIC,EAAS,wDADI,EAAKf,MAAMgB,YAAYT,IAC3B,yDACbU,IAAMC,IAAIH,GACTI,MAAK,SAAAC,GACJ,EAAKtB,SAAS,CACZQ,SAAUc,EAASC,KAAKC,QAAQ,GAAGC,KAAKC,YAzB5C,EAAKxB,MAAQ,CACXyB,MAAOJ,EAAKI,MACZT,YAAaK,EAAKI,MAAM,GACxBnB,SAAU,IAGZ,EAAKoB,WAAa,EAAKA,WAAWzB,KAAhB,gBARD,E,gEAYjBG,KAAKU,gB,yCAGYa,EAAWC,GACvBA,EAAUZ,cAAgBZ,KAAKJ,MAAMgB,aACtCZ,KAAKU,gB,oCAeGe,GAEZ,OADWA,EAAaC,KAAKC,MAAMD,KAAKE,SAAWH,EAAaI,W,mCAKhE,IAAIJ,EAAezB,KAAKJ,MAAMyB,MAC9BrB,KAAKN,SAAS,CACZkB,YAAaZ,KAAK8B,cAAcL,O,+BAKlC,OACE,yBAAK3B,UAAU,OACX,2CACF,yBAAKA,UAAU,WACb,kBAAC,EAAD,CACEK,IAAKH,KAAKJ,MAAMgB,YAAYT,IAC5BC,MAAOJ,KAAKJ,MAAMgB,YAAYR,MAC9BC,QAASL,KAAKJ,MAAMgB,YAAYP,QAChCH,SAAUF,KAAKJ,MAAMM,YAGzB,yBAAKJ,UAAU,aACb,kBAAC,EAAD,CAAYU,SAAUR,KAAKsB,mB,GA1DnBhB,aCEEyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB5B,MAAK,SAAA6B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.07b08e61.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport './Card.css';\r\n\r\nclass Card extends Component {\r\n  constructor(props) {\r\n  super(props);\r\n  this.state = {\r\n    flipped: true,\r\n  }\r\n\r\n  this.handleCardFlip = this.handleCardFlip.bind(this);\r\n  }\r\n  \r\n  handleCardFlip = () => {\r\n    this.setState({\r\n      flipped: !this.state.flipped,\r\n  });\r\n  }\r\n\r\n  render() {\r\n    return(\r\n      <div className=\"card-container\">\r\n          <div onClick={() => this.handleCardFlip()} className={this.state.flipped ? \"card\" : \"card is-flipped\"}>\r\n            <div className=\"card__face card__face--front\">\r\n                <div className=\"image-container\">\r\n                  <img src={this.props.imageSrc}/>\r\n                </div>\r\n                <div className=\"english\">{this.props.eng}</div>\r\n            </div>\r\n            <div className=\"card__face card__face--back\">\r\n                <div className=\"kanji\">{this.props.kanji}</div>\r\n                <div className=\"romanji\">{this.props.romanji}</div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Card;\r\n\r\n// const Card = (props) => (\r\n//   <div className=\"card-container\">\r\n//     <div className=\"card\">\r\n//       <div className=\"front\">\r\n//           <div className=\"image-container\">\r\n//             <img src={props.imageSrc}/>\r\n//           </div>\r\n//           <div className=\"english\">{props.eng}</div>\r\n//       </div>\r\n//       <div className=\"back\">\r\n//           <div className=\"kanji\">{props.kanji}</div>\r\n//           <div className=\"romanji\">{props.romanji}</div>\r\n//       </div>\r\n//     </div>\r\n//   </div>\r\n// )\r\n","import React, { Component } from 'react';\r\nimport './DrawButton.css';\r\n\r\nclass DrawButton extends Component {\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.drawCard = this.drawCard.bind(this);\r\n    }\r\n\r\n    drawCard(){\r\n        this.props.drawCard();\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div className=\"button-container\">\r\n                <button className=\"btn\" onClick={this.drawCard}>Draw Card</button>\r\n          </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default DrawButton;","import React, {Component} from 'react';\nimport axios from 'axios';\nimport data from './data/data.json';\nimport './App.css';\n\nimport Card from './Card/Card';\nimport DrawButton from './DrawButton/DrawButton';\n\nconst clientId = process.env.REACT_APP_ACCESS_KEY;\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      cards: data.cards,\n      currentCard: data.cards[0],\n      imageSrc: \"\"\n    }\n\n    this.updateCard = this.updateCard.bind(this);\n  }\n\n  componentDidMount() {\n    this.getimageSrc();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if ( prevState.currentCard !== this.state.currentCard ) {\n        this.getimageSrc();\n      }\n  }\n\n  getimageSrc = () => {\n    let searchTerm = this.state.currentCard.eng;\n    let newURL = \"https://api.unsplash.com/search/photos/?page=1&query=\" + searchTerm + \"&client_id=\" + clientId;\n    axios.get(newURL)\n    .then(response => {\n      this.setState({ \n        imageSrc: response.data.results[0].urls.small \n      });\n    })\n  }\n\n  getRandomCard(currentCards) {\n    var card = currentCards[Math.floor(Math.random() * currentCards.length)]\n    return(card);\n  }\n\n  updateCard() {\n    let currentCards = this.state.cards;\n    this.setState({\n      currentCard: this.getRandomCard(currentCards)\n    })\n  }\n\n  render () {\n    return (\n      <div className=\"App\">\n          <h1>Kanji Cards</h1>\n        <div className=\"cardRow\">\n          <Card \n            eng={this.state.currentCard.eng} \n            kanji={this.state.currentCard.kanji} \n            romanji={this.state.currentCard.romanji}\n            imageSrc={this.state.imageSrc}\n          />\n        </div>\n        <div className=\"buttonRow\">\n          <DrawButton drawCard={this.updateCard}/>\n        </div>\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}